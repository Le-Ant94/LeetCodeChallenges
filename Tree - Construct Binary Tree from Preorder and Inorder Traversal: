# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def buildTree(self, preorder: List[int], inorder: List[int]) -> Optional[TreeNode]:
        if not preorder or not inorder:
                return None
            
        root = TreeNode(preorder[0])        #create a tree node with the value of 0
        mid = inorder.index(preorder[0])    #find the position of the node "root" in the array, set it equal to mid, mid tells us the # of nodes we want
        root.left = self.buildTree(preorder[1:mid + 1], inorder[:mid])      #preorder: start at index 1 to mid + 1, inorder: start from beginning to mid (but not including mid)
        root.right = self.buildTree(preorder[mid +1:], inorder[mid+1:])     #preorder: start at mid + 1 to end of list, inorder: start at mid + 1 to end of list
        
        return root
