def threeSum(self, nums: List[int]) -> List[List[int]]:
        #time: O(n^2) , space: O(1) or O(n) depending on your implementation of sorting
        res = []        #make a list "result"
        nums.sort()     #sort the input array
        
        for i, a in enumerate(nums):
            if i > 0 and a == nums[i-1]:    #if i isn't the first value in in the input array and "a" is the same as the value as the one before...
                continue                    #... then we don't want to reuse the same value, we want to continue
            
            l, r = i + 1, len(nums) - 1     #left pointer would be starting at the beginning of the list, and right pointer would be starting at the end of the list
            while l < r:
                threeSum = a + nums[l] + nums[r]
                if threeSum > 0:            #if the sum is greater than 0, then move the right pointer to the left
                    r -= 1
                elif threeSum < 0:          #if the sum is lesser than 0, then move the left pointer to the right
                    l += 1
                else:                       #if the sum is equals to 0, then add to the result
                    res.append([a, nums[l], nums[r]])
                    l += 1
                    while nums[l] == nums[l-1] and l < r:   #keep shifting the left pointer to the right if it encounters the same value as previous
                        l += 1
        return res
